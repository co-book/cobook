<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.ebook.cobook.mapper.ReviewMapper">

	<insert id="writeReview" parameterType="ReviewVO">
		insert into bookreview(review_no, member_no, title,
		contents, ebook_no,
		reg_date, evaluate)
		values
		(review_no_seq.nextval,
		#{member_no}, #{title},
		#{contents}, #{ebook_no}, sysdate, #{evaluate})
		
		<selectKey resultType="int" keyProperty="review_no" order="AFTER">
		SELECT review_no_seq.currval from dual
		</selectKey>
	</insert>

	<select id="getBookReviewList" resultType="map" parameterType="org.ebook.cobook.board.domain.Criteria">
<![CDATA[
	SELECT review_no, title, contents, hit, reg_date, evaluate, coverurl, category, nickname
FROM (
        SELECT ROWNUM AS rn, review_no, title, contents, hit, reg_date, evaluate
      , coverurl, category, nickname
          FROM (
                 SELECT br.review_no,  br.title, br.contents, br.hit, br.reg_date, br.evaluate,
                 e.coverurl, e.category, m.nickname
                 FROM bookreview br, ebook e, member m
                 WHERE br.ebook_no = e.ebook_no
                 AND br.member_no = m.member_no
                 ORDER BY review_no DESC
                )
      )
WHERE rn > #{pageStart} AND ROWNUM <= #{perPageNum}
]]>
	<include refid="search"></include>
	</select>



	<select id="getReviewCount" resultType="int" parameterType="org.ebook.cobook.board.domain.Criteria">
	<![CDATA[  
  select count(br.review_no) 
  FROM bookreview br, ebook e, member m
  where br.review_no > 0 
  AND br.ebook_no = e.ebook_no
  AND br.member_no = m.member_no
	]]>
		<include refid="search"></include>

	</select>

	<select id="getReviewSingle" resultType="map">
		SELECT br.review_no, br.title, br.evaluate, br.contents, br.reg_date, br.hit, e.author,
		e.publisher, e.coverurl, m.nickname, br.ebook_no
		FROM bookreview br, ebook e, member m
		WHERE 
			br.ebook_no = e.ebook_no
		AND
  			br.member_no = m.member_no
		AND
			br.review_no = #{review_no}
	</select>

	<update id="modifyReview">
		update bookreview
		set title = #{title}, contents = #{contents},
		ebook_no = #{ebook_no}
		where review_no = #{review_no}

	</update>

	<delete id="deleteReview">
		delete from bookreview
		where review_no = #{review_no}

	</delete>

<update id="increseHit">
	UPDATE bookreview
	SET
		hit = hit + 1
	WHERE
		review_no = #{review_no}
	
	</update>

<!-- 인기순 -->
<select id="getReviewPopularity" resultType="map">
<![CDATA[  
SELECT review_no, title, contents, hit, reg_date, evaluate, coverurl, category, nickname
FROM (
        SELECT ROWNUM AS rn, review_no, title, contents, hit, reg_date, evaluate
      , coverurl, category, nickname
          FROM (
                 SELECT br.review_no,  br.title, br.contents, br.hit, br.reg_date, br.evaluate,
                 e.coverurl, e.category, m.nickname
                 FROM bookreview br, ebook e, member m
                 WHERE br.ebook_no = e.ebook_no
                 AND br.member_no = m.member_no
                 ORDER BY hit DESC
                )
      )
WHERE
rn > #{pageStart} AND ROWNUM <= #{perPageNum}
]]>
<include refid="search"></include>
</select>

<!-- 좋아요 순위6 -->
	<select id="getBestReply" resultType="map">
<![CDATA[
SELECT r.reply_no, r.board_no, r.contents,  m.nickname, likeCount
FROM
(
  SELECT l.reply_no, count(like_it_no) AS likeCount
  FROM like_it l, reply r
  WHERE l.reply_no = r.reply_no
  AND parent_type like 'BOOKREVIEW'
  GROUP BY l.reply_no
) l, reply r, member m
WHERE l.reply_no = r.reply_no
AND  r.member_no = m.member_no
AND ROWNUM <= 6
]]>
	</select>

<select id="getlastedReviewList" resultType="ReviewVO">
<![CDATA[
SELECT review_no, title, ebook_title, reg_date FROM(
SELECT br.review_no, br.title, e.title AS ebook_title, br.reg_date
FROM bookreview br, ebook e
WHERE br.ebook_no = e.ebook_no
ORDER BY reg_date desc
)
WHERE rownum <= 10
]]>
</select>



	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				AND br.title like CONCAT('%', #{keyword}) || '%'
			</if>
			<if test="searchType == 'c'.toString()">
				AND br.contents like CONCAT('%', #{keyword}) || '%'
			</if>
			<if test="searchType == 'w'.toString()">
				AND br.member_no
				IN(select member_no FROM member
				WHERE
				nickname like CONCAT('%', #{keyword}) || '%')
			</if>
			<if test="searchType == 'tc'.toString()">
				and ( br.title like CONCAT('%', #{keyword}) || '%' OR
				br.contents like
				CONCAT('%', #{keyword}) || '%')
			</if>
			<if test="searchType == 'cw'.toString()">
				and
				( br.contents like CONCAT('%', #{keyword}) || '%'
				OR
				member_no IN(select member_no FROM member
				WHERE nickname like
				CONCAT('%', #{keyword}) || '%')
				)
			</if>
			<if test="searchType == 'tcw'.toString()">
				AND
				( br.title like CONCAT('%', #{keyword}) || '%'
				OR
				br.contents
				like CONCAT('%', #{keyword}) || '%'
				OR
				member_no IN(select member_no
				FROM member
				WHERE nickname like CONCAT('%', #{keyword}) || '%')
				)
			</if>
			<if test="searchType == 'ㄱ'.toString()">
			AND br.title between '가' and '나'
			OR br.title between 'ㄱ' AND 'ㄴ'
			</if>
			<if test="searchType == 'ㄴ'.toString()">
			AND br.title between '나' and '다'
			OR br.title between 'ㄴ' AND 'ㄷ'
			</if>
			<if test="searchType == 'ㄷ'.toString()">
		AND br.title between '다' and '리'
			OR br.title between 'ㄷ' AND 'ㄹ'
			</if>
			<if test="searchType == 'ㄹ'.toString()">
			AND br.title between '라' and '마'
			OR br.title between 'ㄹ' AND 'ㅁ'
			</if>
			<if test="searchType == 'ㅁ'.toString()">
			AND br.title between '마' and '바'
			OR br.title between 'ㅁ' AND 'ㅂ'
			</if>
			<if test="searchType == 'ㅂ'.toString()">
			AND br.title between '바' and '사'
			OR br.title between 'ㅂ' AND 'ㅅ'
			</if>
			<if test="searchType == 'ㅅ'.toString()">
				AND br.title between '사' and '아'
			OR br.title between 'ㅅ' AND 'ㅇ'
			</if>
			<if test="searchType == 'ㅇ'.toString()">
			AND title between '아' and '자'
			OR title between 'ㅇ' AND 'ㅈ'
			</if>
			<if test="searchType == 'ㅈ'.toString()">
			AND title between '자' and '차'
			OR title between 'ㅈ' AND 'ㅊ'
			</if>
			<if test="searchType == 'ㅊ'.toString()">
			AND title between '차' and '카'
			OR title between 'ㅊ' AND 'ㅋ'
			</if>
			<if test="searchType == 'ㅋ'.toString()">
			AND title between '카' and '타'
			OR title between 'ㅋ' AND 'ㅌ'
			</if>
			<if test="searchType == 'ㅌ'.toString()">
			AND title between '타' and '파'
			OR title between 'ㅌ' AND 'ㅍ'
			</if>
			<if test="searchType == 'ㅍ'.toString()">
			AND title between '파' and '하'
			OR title between 'ㅍ' AND 'ㅎ'
			</if>
			<if test="searchType == 'ㅎ'.toString()">
			AND title between '하' and '가'
			OR title between 'ㅎ' AND 'ㄱ'
			</if>
		</if>
	</sql>
</mapper>